// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package speech

import (
	"cloud.google.com/go/speech/apiv2/speechpb"
	"context"
	"github.com/googleapis/gax-go/v2"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			StreamingRecognizeFunc: func(ctx context.Context, opts ...gax.CallOption) (speechpb.Speech_StreamingRecognizeClient, error) {
//				panic("mock out the StreamingRecognize method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// StreamingRecognizeFunc mocks the StreamingRecognize method.
	StreamingRecognizeFunc func(ctx context.Context, opts ...gax.CallOption) (speechpb.Speech_StreamingRecognizeClient, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// StreamingRecognize holds details about calls to the StreamingRecognize method.
		StreamingRecognize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts []gax.CallOption
		}
	}
	lockClose              sync.RWMutex
	lockStreamingRecognize sync.RWMutex
}

// Close calls CloseFunc.
func (mock *ClientMock) Close() error {
	if mock.CloseFunc == nil {
		panic("ClientMock.CloseFunc: method is nil but Client.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedClient.CloseCalls())
func (mock *ClientMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// StreamingRecognize calls StreamingRecognizeFunc.
func (mock *ClientMock) StreamingRecognize(ctx context.Context, opts ...gax.CallOption) (speechpb.Speech_StreamingRecognizeClient, error) {
	if mock.StreamingRecognizeFunc == nil {
		panic("ClientMock.StreamingRecognizeFunc: method is nil but Client.StreamingRecognize was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts []gax.CallOption
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockStreamingRecognize.Lock()
	mock.calls.StreamingRecognize = append(mock.calls.StreamingRecognize, callInfo)
	mock.lockStreamingRecognize.Unlock()
	return mock.StreamingRecognizeFunc(ctx, opts...)
}

// StreamingRecognizeCalls gets all the calls that were made to StreamingRecognize.
// Check the length with:
//
//	len(mockedClient.StreamingRecognizeCalls())
func (mock *ClientMock) StreamingRecognizeCalls() []struct {
	Ctx  context.Context
	Opts []gax.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		Opts []gax.CallOption
	}
	mock.lockStreamingRecognize.RLock()
	calls = mock.calls.StreamingRecognize
	mock.lockStreamingRecognize.RUnlock()
	return calls
}
