// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package recognizer

import (
	"context"
	"sync"
)

// Ensure, that ProcessMonitorInterfaceMock does implement ProcessMonitorInterface.
// If this is not the case, regenerate this file with moq.
var _ ProcessMonitorInterface = &ProcessMonitorInterfaceMock{}

// ProcessMonitorInterfaceMock is a mock implementation of ProcessMonitorInterface.
//
//	func TestSomethingThatUsesProcessMonitorInterface(t *testing.T) {
//
//		// make and configure a mocked ProcessMonitorInterface
//		mockedProcessMonitorInterface := &ProcessMonitorInterfaceMock{
//			StartFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedProcessMonitorInterface in code that requires ProcessMonitorInterface
//		// and then make assertions.
//
//	}
type ProcessMonitorInterfaceMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(contextMoqParam context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockStart sync.RWMutex
}

// Start calls StartFunc.
func (mock *ProcessMonitorInterfaceMock) Start(contextMoqParam context.Context) error {
	if mock.StartFunc == nil {
		panic("ProcessMonitorInterfaceMock.StartFunc: method is nil but ProcessMonitorInterface.Start was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(contextMoqParam)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedProcessMonitorInterface.StartCalls())
func (mock *ProcessMonitorInterfaceMock) StartCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
