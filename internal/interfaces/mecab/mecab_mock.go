// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mecab

import (
	"github.com/shogo82148/go-mecab"
	"sync"
)

// Ensure, that MeCabMock does implement MeCab.
// If this is not the case, regenerate this file with moq.
var _ MeCab = &MeCabMock{}

// MeCabMock is a mock implementation of MeCab.
//
//	func TestSomethingThatUsesMeCab(t *testing.T) {
//
//		// make and configure a mocked MeCab
//		mockedMeCab := &MeCabMock{
//			ParseToNodeFunc: func(s string) (mecab.Node, error) {
//				panic("mock out the ParseToNode method")
//			},
//		}
//
//		// use mockedMeCab in code that requires MeCab
//		// and then make assertions.
//
//	}
type MeCabMock struct {
	// ParseToNodeFunc mocks the ParseToNode method.
	ParseToNodeFunc func(s string) (mecab.Node, error)

	// calls tracks calls to the methods.
	calls struct {
		// ParseToNode holds details about calls to the ParseToNode method.
		ParseToNode []struct {
			// S is the s argument value.
			S string
		}
	}
	lockParseToNode sync.RWMutex
}

// ParseToNode calls ParseToNodeFunc.
func (mock *MeCabMock) ParseToNode(s string) (mecab.Node, error) {
	if mock.ParseToNodeFunc == nil {
		panic("MeCabMock.ParseToNodeFunc: method is nil but MeCab.ParseToNode was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockParseToNode.Lock()
	mock.calls.ParseToNode = append(mock.calls.ParseToNode, callInfo)
	mock.lockParseToNode.Unlock()
	return mock.ParseToNodeFunc(s)
}

// ParseToNodeCalls gets all the calls that were made to ParseToNode.
// Check the length with:
//
//	len(mockedMeCab.ParseToNodeCalls())
func (mock *MeCabMock) ParseToNodeCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockParseToNode.RLock()
	calls = mock.calls.ParseToNode
	mock.lockParseToNode.RUnlock()
	return calls
}
