// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package speechpb

import (
	"cloud.google.com/go/longrunning/autogen/longrunningpb"
	"cloud.google.com/go/speech/apiv2/speechpb"
	"context"
	"sync"
)

// Ensure, that SpeechServerMock does implement SpeechServer.
// If this is not the case, regenerate this file with moq.
var _ SpeechServer = &SpeechServerMock{}

// SpeechServerMock is a mock implementation of SpeechServer.
//
//	func TestSomethingThatUsesSpeechServer(t *testing.T) {
//
//		// make and configure a mocked SpeechServer
//		mockedSpeechServer := &SpeechServerMock{
//			BatchRecognizeFunc: func(contextMoqParam context.Context, batchRecognizeRequest *speechpb.BatchRecognizeRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the BatchRecognize method")
//			},
//			CreateCustomClassFunc: func(contextMoqParam context.Context, createCustomClassRequest *speechpb.CreateCustomClassRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the CreateCustomClass method")
//			},
//			CreatePhraseSetFunc: func(contextMoqParam context.Context, createPhraseSetRequest *speechpb.CreatePhraseSetRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the CreatePhraseSet method")
//			},
//			CreateRecognizerFunc: func(contextMoqParam context.Context, createRecognizerRequest *speechpb.CreateRecognizerRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the CreateRecognizer method")
//			},
//			DeleteCustomClassFunc: func(contextMoqParam context.Context, deleteCustomClassRequest *speechpb.DeleteCustomClassRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the DeleteCustomClass method")
//			},
//			DeletePhraseSetFunc: func(contextMoqParam context.Context, deletePhraseSetRequest *speechpb.DeletePhraseSetRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the DeletePhraseSet method")
//			},
//			DeleteRecognizerFunc: func(contextMoqParam context.Context, deleteRecognizerRequest *speechpb.DeleteRecognizerRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the DeleteRecognizer method")
//			},
//			GetConfigFunc: func(contextMoqParam context.Context, getConfigRequest *speechpb.GetConfigRequest) (*speechpb.Config, error) {
//				panic("mock out the GetConfig method")
//			},
//			GetCustomClassFunc: func(contextMoqParam context.Context, getCustomClassRequest *speechpb.GetCustomClassRequest) (*speechpb.CustomClass, error) {
//				panic("mock out the GetCustomClass method")
//			},
//			GetPhraseSetFunc: func(contextMoqParam context.Context, getPhraseSetRequest *speechpb.GetPhraseSetRequest) (*speechpb.PhraseSet, error) {
//				panic("mock out the GetPhraseSet method")
//			},
//			GetRecognizerFunc: func(contextMoqParam context.Context, getRecognizerRequest *speechpb.GetRecognizerRequest) (*speechpb.Recognizer, error) {
//				panic("mock out the GetRecognizer method")
//			},
//			ListCustomClassesFunc: func(contextMoqParam context.Context, listCustomClassesRequest *speechpb.ListCustomClassesRequest) (*speechpb.ListCustomClassesResponse, error) {
//				panic("mock out the ListCustomClasses method")
//			},
//			ListPhraseSetsFunc: func(contextMoqParam context.Context, listPhraseSetsRequest *speechpb.ListPhraseSetsRequest) (*speechpb.ListPhraseSetsResponse, error) {
//				panic("mock out the ListPhraseSets method")
//			},
//			ListRecognizersFunc: func(contextMoqParam context.Context, listRecognizersRequest *speechpb.ListRecognizersRequest) (*speechpb.ListRecognizersResponse, error) {
//				panic("mock out the ListRecognizers method")
//			},
//			RecognizeFunc: func(contextMoqParam context.Context, recognizeRequest *speechpb.RecognizeRequest) (*speechpb.RecognizeResponse, error) {
//				panic("mock out the Recognize method")
//			},
//			StreamingRecognizeFunc: func(speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer) error {
//				panic("mock out the StreamingRecognize method")
//			},
//			UndeleteCustomClassFunc: func(contextMoqParam context.Context, undeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the UndeleteCustomClass method")
//			},
//			UndeletePhraseSetFunc: func(contextMoqParam context.Context, undeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the UndeletePhraseSet method")
//			},
//			UndeleteRecognizerFunc: func(contextMoqParam context.Context, undeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the UndeleteRecognizer method")
//			},
//			UpdateConfigFunc: func(contextMoqParam context.Context, updateConfigRequest *speechpb.UpdateConfigRequest) (*speechpb.Config, error) {
//				panic("mock out the UpdateConfig method")
//			},
//			UpdateCustomClassFunc: func(contextMoqParam context.Context, updateCustomClassRequest *speechpb.UpdateCustomClassRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the UpdateCustomClass method")
//			},
//			UpdatePhraseSetFunc: func(contextMoqParam context.Context, updatePhraseSetRequest *speechpb.UpdatePhraseSetRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the UpdatePhraseSet method")
//			},
//			UpdateRecognizerFunc: func(contextMoqParam context.Context, updateRecognizerRequest *speechpb.UpdateRecognizerRequest) (*longrunningpb.Operation, error) {
//				panic("mock out the UpdateRecognizer method")
//			},
//		}
//
//		// use mockedSpeechServer in code that requires SpeechServer
//		// and then make assertions.
//
//	}
type SpeechServerMock struct {
	// BatchRecognizeFunc mocks the BatchRecognize method.
	BatchRecognizeFunc func(contextMoqParam context.Context, batchRecognizeRequest *speechpb.BatchRecognizeRequest) (*longrunningpb.Operation, error)

	// CreateCustomClassFunc mocks the CreateCustomClass method.
	CreateCustomClassFunc func(contextMoqParam context.Context, createCustomClassRequest *speechpb.CreateCustomClassRequest) (*longrunningpb.Operation, error)

	// CreatePhraseSetFunc mocks the CreatePhraseSet method.
	CreatePhraseSetFunc func(contextMoqParam context.Context, createPhraseSetRequest *speechpb.CreatePhraseSetRequest) (*longrunningpb.Operation, error)

	// CreateRecognizerFunc mocks the CreateRecognizer method.
	CreateRecognizerFunc func(contextMoqParam context.Context, createRecognizerRequest *speechpb.CreateRecognizerRequest) (*longrunningpb.Operation, error)

	// DeleteCustomClassFunc mocks the DeleteCustomClass method.
	DeleteCustomClassFunc func(contextMoqParam context.Context, deleteCustomClassRequest *speechpb.DeleteCustomClassRequest) (*longrunningpb.Operation, error)

	// DeletePhraseSetFunc mocks the DeletePhraseSet method.
	DeletePhraseSetFunc func(contextMoqParam context.Context, deletePhraseSetRequest *speechpb.DeletePhraseSetRequest) (*longrunningpb.Operation, error)

	// DeleteRecognizerFunc mocks the DeleteRecognizer method.
	DeleteRecognizerFunc func(contextMoqParam context.Context, deleteRecognizerRequest *speechpb.DeleteRecognizerRequest) (*longrunningpb.Operation, error)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func(contextMoqParam context.Context, getConfigRequest *speechpb.GetConfigRequest) (*speechpb.Config, error)

	// GetCustomClassFunc mocks the GetCustomClass method.
	GetCustomClassFunc func(contextMoqParam context.Context, getCustomClassRequest *speechpb.GetCustomClassRequest) (*speechpb.CustomClass, error)

	// GetPhraseSetFunc mocks the GetPhraseSet method.
	GetPhraseSetFunc func(contextMoqParam context.Context, getPhraseSetRequest *speechpb.GetPhraseSetRequest) (*speechpb.PhraseSet, error)

	// GetRecognizerFunc mocks the GetRecognizer method.
	GetRecognizerFunc func(contextMoqParam context.Context, getRecognizerRequest *speechpb.GetRecognizerRequest) (*speechpb.Recognizer, error)

	// ListCustomClassesFunc mocks the ListCustomClasses method.
	ListCustomClassesFunc func(contextMoqParam context.Context, listCustomClassesRequest *speechpb.ListCustomClassesRequest) (*speechpb.ListCustomClassesResponse, error)

	// ListPhraseSetsFunc mocks the ListPhraseSets method.
	ListPhraseSetsFunc func(contextMoqParam context.Context, listPhraseSetsRequest *speechpb.ListPhraseSetsRequest) (*speechpb.ListPhraseSetsResponse, error)

	// ListRecognizersFunc mocks the ListRecognizers method.
	ListRecognizersFunc func(contextMoqParam context.Context, listRecognizersRequest *speechpb.ListRecognizersRequest) (*speechpb.ListRecognizersResponse, error)

	// RecognizeFunc mocks the Recognize method.
	RecognizeFunc func(contextMoqParam context.Context, recognizeRequest *speechpb.RecognizeRequest) (*speechpb.RecognizeResponse, error)

	// StreamingRecognizeFunc mocks the StreamingRecognize method.
	StreamingRecognizeFunc func(speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer) error

	// UndeleteCustomClassFunc mocks the UndeleteCustomClass method.
	UndeleteCustomClassFunc func(contextMoqParam context.Context, undeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest) (*longrunningpb.Operation, error)

	// UndeletePhraseSetFunc mocks the UndeletePhraseSet method.
	UndeletePhraseSetFunc func(contextMoqParam context.Context, undeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest) (*longrunningpb.Operation, error)

	// UndeleteRecognizerFunc mocks the UndeleteRecognizer method.
	UndeleteRecognizerFunc func(contextMoqParam context.Context, undeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest) (*longrunningpb.Operation, error)

	// UpdateConfigFunc mocks the UpdateConfig method.
	UpdateConfigFunc func(contextMoqParam context.Context, updateConfigRequest *speechpb.UpdateConfigRequest) (*speechpb.Config, error)

	// UpdateCustomClassFunc mocks the UpdateCustomClass method.
	UpdateCustomClassFunc func(contextMoqParam context.Context, updateCustomClassRequest *speechpb.UpdateCustomClassRequest) (*longrunningpb.Operation, error)

	// UpdatePhraseSetFunc mocks the UpdatePhraseSet method.
	UpdatePhraseSetFunc func(contextMoqParam context.Context, updatePhraseSetRequest *speechpb.UpdatePhraseSetRequest) (*longrunningpb.Operation, error)

	// UpdateRecognizerFunc mocks the UpdateRecognizer method.
	UpdateRecognizerFunc func(contextMoqParam context.Context, updateRecognizerRequest *speechpb.UpdateRecognizerRequest) (*longrunningpb.Operation, error)

	// calls tracks calls to the methods.
	calls struct {
		// BatchRecognize holds details about calls to the BatchRecognize method.
		BatchRecognize []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// BatchRecognizeRequest is the batchRecognizeRequest argument value.
			BatchRecognizeRequest *speechpb.BatchRecognizeRequest
		}
		// CreateCustomClass holds details about calls to the CreateCustomClass method.
		CreateCustomClass []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCustomClassRequest is the createCustomClassRequest argument value.
			CreateCustomClassRequest *speechpb.CreateCustomClassRequest
		}
		// CreatePhraseSet holds details about calls to the CreatePhraseSet method.
		CreatePhraseSet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreatePhraseSetRequest is the createPhraseSetRequest argument value.
			CreatePhraseSetRequest *speechpb.CreatePhraseSetRequest
		}
		// CreateRecognizer holds details about calls to the CreateRecognizer method.
		CreateRecognizer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateRecognizerRequest is the createRecognizerRequest argument value.
			CreateRecognizerRequest *speechpb.CreateRecognizerRequest
		}
		// DeleteCustomClass holds details about calls to the DeleteCustomClass method.
		DeleteCustomClass []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteCustomClassRequest is the deleteCustomClassRequest argument value.
			DeleteCustomClassRequest *speechpb.DeleteCustomClassRequest
		}
		// DeletePhraseSet holds details about calls to the DeletePhraseSet method.
		DeletePhraseSet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeletePhraseSetRequest is the deletePhraseSetRequest argument value.
			DeletePhraseSetRequest *speechpb.DeletePhraseSetRequest
		}
		// DeleteRecognizer holds details about calls to the DeleteRecognizer method.
		DeleteRecognizer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteRecognizerRequest is the deleteRecognizerRequest argument value.
			DeleteRecognizerRequest *speechpb.DeleteRecognizerRequest
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetConfigRequest is the getConfigRequest argument value.
			GetConfigRequest *speechpb.GetConfigRequest
		}
		// GetCustomClass holds details about calls to the GetCustomClass method.
		GetCustomClass []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCustomClassRequest is the getCustomClassRequest argument value.
			GetCustomClassRequest *speechpb.GetCustomClassRequest
		}
		// GetPhraseSet holds details about calls to the GetPhraseSet method.
		GetPhraseSet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetPhraseSetRequest is the getPhraseSetRequest argument value.
			GetPhraseSetRequest *speechpb.GetPhraseSetRequest
		}
		// GetRecognizer holds details about calls to the GetRecognizer method.
		GetRecognizer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetRecognizerRequest is the getRecognizerRequest argument value.
			GetRecognizerRequest *speechpb.GetRecognizerRequest
		}
		// ListCustomClasses holds details about calls to the ListCustomClasses method.
		ListCustomClasses []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListCustomClassesRequest is the listCustomClassesRequest argument value.
			ListCustomClassesRequest *speechpb.ListCustomClassesRequest
		}
		// ListPhraseSets holds details about calls to the ListPhraseSets method.
		ListPhraseSets []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPhraseSetsRequest is the listPhraseSetsRequest argument value.
			ListPhraseSetsRequest *speechpb.ListPhraseSetsRequest
		}
		// ListRecognizers holds details about calls to the ListRecognizers method.
		ListRecognizers []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListRecognizersRequest is the listRecognizersRequest argument value.
			ListRecognizersRequest *speechpb.ListRecognizersRequest
		}
		// Recognize holds details about calls to the Recognize method.
		Recognize []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RecognizeRequest is the recognizeRequest argument value.
			RecognizeRequest *speechpb.RecognizeRequest
		}
		// StreamingRecognize holds details about calls to the StreamingRecognize method.
		StreamingRecognize []struct {
			// Speech_StreamingRecognizeServer is the speech_StreamingRecognizeServer argument value.
			Speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer
		}
		// UndeleteCustomClass holds details about calls to the UndeleteCustomClass method.
		UndeleteCustomClass []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UndeleteCustomClassRequest is the undeleteCustomClassRequest argument value.
			UndeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest
		}
		// UndeletePhraseSet holds details about calls to the UndeletePhraseSet method.
		UndeletePhraseSet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UndeletePhraseSetRequest is the undeletePhraseSetRequest argument value.
			UndeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest
		}
		// UndeleteRecognizer holds details about calls to the UndeleteRecognizer method.
		UndeleteRecognizer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UndeleteRecognizerRequest is the undeleteRecognizerRequest argument value.
			UndeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest
		}
		// UpdateConfig holds details about calls to the UpdateConfig method.
		UpdateConfig []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateConfigRequest is the updateConfigRequest argument value.
			UpdateConfigRequest *speechpb.UpdateConfigRequest
		}
		// UpdateCustomClass holds details about calls to the UpdateCustomClass method.
		UpdateCustomClass []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateCustomClassRequest is the updateCustomClassRequest argument value.
			UpdateCustomClassRequest *speechpb.UpdateCustomClassRequest
		}
		// UpdatePhraseSet holds details about calls to the UpdatePhraseSet method.
		UpdatePhraseSet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdatePhraseSetRequest is the updatePhraseSetRequest argument value.
			UpdatePhraseSetRequest *speechpb.UpdatePhraseSetRequest
		}
		// UpdateRecognizer holds details about calls to the UpdateRecognizer method.
		UpdateRecognizer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateRecognizerRequest is the updateRecognizerRequest argument value.
			UpdateRecognizerRequest *speechpb.UpdateRecognizerRequest
		}
	}
	lockBatchRecognize      sync.RWMutex
	lockCreateCustomClass   sync.RWMutex
	lockCreatePhraseSet     sync.RWMutex
	lockCreateRecognizer    sync.RWMutex
	lockDeleteCustomClass   sync.RWMutex
	lockDeletePhraseSet     sync.RWMutex
	lockDeleteRecognizer    sync.RWMutex
	lockGetConfig           sync.RWMutex
	lockGetCustomClass      sync.RWMutex
	lockGetPhraseSet        sync.RWMutex
	lockGetRecognizer       sync.RWMutex
	lockListCustomClasses   sync.RWMutex
	lockListPhraseSets      sync.RWMutex
	lockListRecognizers     sync.RWMutex
	lockRecognize           sync.RWMutex
	lockStreamingRecognize  sync.RWMutex
	lockUndeleteCustomClass sync.RWMutex
	lockUndeletePhraseSet   sync.RWMutex
	lockUndeleteRecognizer  sync.RWMutex
	lockUpdateConfig        sync.RWMutex
	lockUpdateCustomClass   sync.RWMutex
	lockUpdatePhraseSet     sync.RWMutex
	lockUpdateRecognizer    sync.RWMutex
}

// BatchRecognize calls BatchRecognizeFunc.
func (mock *SpeechServerMock) BatchRecognize(contextMoqParam context.Context, batchRecognizeRequest *speechpb.BatchRecognizeRequest) (*longrunningpb.Operation, error) {
	if mock.BatchRecognizeFunc == nil {
		panic("SpeechServerMock.BatchRecognizeFunc: method is nil but SpeechServer.BatchRecognize was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		BatchRecognizeRequest *speechpb.BatchRecognizeRequest
	}{
		ContextMoqParam:       contextMoqParam,
		BatchRecognizeRequest: batchRecognizeRequest,
	}
	mock.lockBatchRecognize.Lock()
	mock.calls.BatchRecognize = append(mock.calls.BatchRecognize, callInfo)
	mock.lockBatchRecognize.Unlock()
	return mock.BatchRecognizeFunc(contextMoqParam, batchRecognizeRequest)
}

// BatchRecognizeCalls gets all the calls that were made to BatchRecognize.
// Check the length with:
//
//	len(mockedSpeechServer.BatchRecognizeCalls())
func (mock *SpeechServerMock) BatchRecognizeCalls() []struct {
	ContextMoqParam       context.Context
	BatchRecognizeRequest *speechpb.BatchRecognizeRequest
} {
	var calls []struct {
		ContextMoqParam       context.Context
		BatchRecognizeRequest *speechpb.BatchRecognizeRequest
	}
	mock.lockBatchRecognize.RLock()
	calls = mock.calls.BatchRecognize
	mock.lockBatchRecognize.RUnlock()
	return calls
}

// CreateCustomClass calls CreateCustomClassFunc.
func (mock *SpeechServerMock) CreateCustomClass(contextMoqParam context.Context, createCustomClassRequest *speechpb.CreateCustomClassRequest) (*longrunningpb.Operation, error) {
	if mock.CreateCustomClassFunc == nil {
		panic("SpeechServerMock.CreateCustomClassFunc: method is nil but SpeechServer.CreateCustomClass was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		CreateCustomClassRequest *speechpb.CreateCustomClassRequest
	}{
		ContextMoqParam:          contextMoqParam,
		CreateCustomClassRequest: createCustomClassRequest,
	}
	mock.lockCreateCustomClass.Lock()
	mock.calls.CreateCustomClass = append(mock.calls.CreateCustomClass, callInfo)
	mock.lockCreateCustomClass.Unlock()
	return mock.CreateCustomClassFunc(contextMoqParam, createCustomClassRequest)
}

// CreateCustomClassCalls gets all the calls that were made to CreateCustomClass.
// Check the length with:
//
//	len(mockedSpeechServer.CreateCustomClassCalls())
func (mock *SpeechServerMock) CreateCustomClassCalls() []struct {
	ContextMoqParam          context.Context
	CreateCustomClassRequest *speechpb.CreateCustomClassRequest
} {
	var calls []struct {
		ContextMoqParam          context.Context
		CreateCustomClassRequest *speechpb.CreateCustomClassRequest
	}
	mock.lockCreateCustomClass.RLock()
	calls = mock.calls.CreateCustomClass
	mock.lockCreateCustomClass.RUnlock()
	return calls
}

// CreatePhraseSet calls CreatePhraseSetFunc.
func (mock *SpeechServerMock) CreatePhraseSet(contextMoqParam context.Context, createPhraseSetRequest *speechpb.CreatePhraseSetRequest) (*longrunningpb.Operation, error) {
	if mock.CreatePhraseSetFunc == nil {
		panic("SpeechServerMock.CreatePhraseSetFunc: method is nil but SpeechServer.CreatePhraseSet was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		CreatePhraseSetRequest *speechpb.CreatePhraseSetRequest
	}{
		ContextMoqParam:        contextMoqParam,
		CreatePhraseSetRequest: createPhraseSetRequest,
	}
	mock.lockCreatePhraseSet.Lock()
	mock.calls.CreatePhraseSet = append(mock.calls.CreatePhraseSet, callInfo)
	mock.lockCreatePhraseSet.Unlock()
	return mock.CreatePhraseSetFunc(contextMoqParam, createPhraseSetRequest)
}

// CreatePhraseSetCalls gets all the calls that were made to CreatePhraseSet.
// Check the length with:
//
//	len(mockedSpeechServer.CreatePhraseSetCalls())
func (mock *SpeechServerMock) CreatePhraseSetCalls() []struct {
	ContextMoqParam        context.Context
	CreatePhraseSetRequest *speechpb.CreatePhraseSetRequest
} {
	var calls []struct {
		ContextMoqParam        context.Context
		CreatePhraseSetRequest *speechpb.CreatePhraseSetRequest
	}
	mock.lockCreatePhraseSet.RLock()
	calls = mock.calls.CreatePhraseSet
	mock.lockCreatePhraseSet.RUnlock()
	return calls
}

// CreateRecognizer calls CreateRecognizerFunc.
func (mock *SpeechServerMock) CreateRecognizer(contextMoqParam context.Context, createRecognizerRequest *speechpb.CreateRecognizerRequest) (*longrunningpb.Operation, error) {
	if mock.CreateRecognizerFunc == nil {
		panic("SpeechServerMock.CreateRecognizerFunc: method is nil but SpeechServer.CreateRecognizer was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		CreateRecognizerRequest *speechpb.CreateRecognizerRequest
	}{
		ContextMoqParam:         contextMoqParam,
		CreateRecognizerRequest: createRecognizerRequest,
	}
	mock.lockCreateRecognizer.Lock()
	mock.calls.CreateRecognizer = append(mock.calls.CreateRecognizer, callInfo)
	mock.lockCreateRecognizer.Unlock()
	return mock.CreateRecognizerFunc(contextMoqParam, createRecognizerRequest)
}

// CreateRecognizerCalls gets all the calls that were made to CreateRecognizer.
// Check the length with:
//
//	len(mockedSpeechServer.CreateRecognizerCalls())
func (mock *SpeechServerMock) CreateRecognizerCalls() []struct {
	ContextMoqParam         context.Context
	CreateRecognizerRequest *speechpb.CreateRecognizerRequest
} {
	var calls []struct {
		ContextMoqParam         context.Context
		CreateRecognizerRequest *speechpb.CreateRecognizerRequest
	}
	mock.lockCreateRecognizer.RLock()
	calls = mock.calls.CreateRecognizer
	mock.lockCreateRecognizer.RUnlock()
	return calls
}

// DeleteCustomClass calls DeleteCustomClassFunc.
func (mock *SpeechServerMock) DeleteCustomClass(contextMoqParam context.Context, deleteCustomClassRequest *speechpb.DeleteCustomClassRequest) (*longrunningpb.Operation, error) {
	if mock.DeleteCustomClassFunc == nil {
		panic("SpeechServerMock.DeleteCustomClassFunc: method is nil but SpeechServer.DeleteCustomClass was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeleteCustomClassRequest *speechpb.DeleteCustomClassRequest
	}{
		ContextMoqParam:          contextMoqParam,
		DeleteCustomClassRequest: deleteCustomClassRequest,
	}
	mock.lockDeleteCustomClass.Lock()
	mock.calls.DeleteCustomClass = append(mock.calls.DeleteCustomClass, callInfo)
	mock.lockDeleteCustomClass.Unlock()
	return mock.DeleteCustomClassFunc(contextMoqParam, deleteCustomClassRequest)
}

// DeleteCustomClassCalls gets all the calls that were made to DeleteCustomClass.
// Check the length with:
//
//	len(mockedSpeechServer.DeleteCustomClassCalls())
func (mock *SpeechServerMock) DeleteCustomClassCalls() []struct {
	ContextMoqParam          context.Context
	DeleteCustomClassRequest *speechpb.DeleteCustomClassRequest
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeleteCustomClassRequest *speechpb.DeleteCustomClassRequest
	}
	mock.lockDeleteCustomClass.RLock()
	calls = mock.calls.DeleteCustomClass
	mock.lockDeleteCustomClass.RUnlock()
	return calls
}

// DeletePhraseSet calls DeletePhraseSetFunc.
func (mock *SpeechServerMock) DeletePhraseSet(contextMoqParam context.Context, deletePhraseSetRequest *speechpb.DeletePhraseSetRequest) (*longrunningpb.Operation, error) {
	if mock.DeletePhraseSetFunc == nil {
		panic("SpeechServerMock.DeletePhraseSetFunc: method is nil but SpeechServer.DeletePhraseSet was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DeletePhraseSetRequest *speechpb.DeletePhraseSetRequest
	}{
		ContextMoqParam:        contextMoqParam,
		DeletePhraseSetRequest: deletePhraseSetRequest,
	}
	mock.lockDeletePhraseSet.Lock()
	mock.calls.DeletePhraseSet = append(mock.calls.DeletePhraseSet, callInfo)
	mock.lockDeletePhraseSet.Unlock()
	return mock.DeletePhraseSetFunc(contextMoqParam, deletePhraseSetRequest)
}

// DeletePhraseSetCalls gets all the calls that were made to DeletePhraseSet.
// Check the length with:
//
//	len(mockedSpeechServer.DeletePhraseSetCalls())
func (mock *SpeechServerMock) DeletePhraseSetCalls() []struct {
	ContextMoqParam        context.Context
	DeletePhraseSetRequest *speechpb.DeletePhraseSetRequest
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DeletePhraseSetRequest *speechpb.DeletePhraseSetRequest
	}
	mock.lockDeletePhraseSet.RLock()
	calls = mock.calls.DeletePhraseSet
	mock.lockDeletePhraseSet.RUnlock()
	return calls
}

// DeleteRecognizer calls DeleteRecognizerFunc.
func (mock *SpeechServerMock) DeleteRecognizer(contextMoqParam context.Context, deleteRecognizerRequest *speechpb.DeleteRecognizerRequest) (*longrunningpb.Operation, error) {
	if mock.DeleteRecognizerFunc == nil {
		panic("SpeechServerMock.DeleteRecognizerFunc: method is nil but SpeechServer.DeleteRecognizer was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteRecognizerRequest *speechpb.DeleteRecognizerRequest
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteRecognizerRequest: deleteRecognizerRequest,
	}
	mock.lockDeleteRecognizer.Lock()
	mock.calls.DeleteRecognizer = append(mock.calls.DeleteRecognizer, callInfo)
	mock.lockDeleteRecognizer.Unlock()
	return mock.DeleteRecognizerFunc(contextMoqParam, deleteRecognizerRequest)
}

// DeleteRecognizerCalls gets all the calls that were made to DeleteRecognizer.
// Check the length with:
//
//	len(mockedSpeechServer.DeleteRecognizerCalls())
func (mock *SpeechServerMock) DeleteRecognizerCalls() []struct {
	ContextMoqParam         context.Context
	DeleteRecognizerRequest *speechpb.DeleteRecognizerRequest
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteRecognizerRequest *speechpb.DeleteRecognizerRequest
	}
	mock.lockDeleteRecognizer.RLock()
	calls = mock.calls.DeleteRecognizer
	mock.lockDeleteRecognizer.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *SpeechServerMock) GetConfig(contextMoqParam context.Context, getConfigRequest *speechpb.GetConfigRequest) (*speechpb.Config, error) {
	if mock.GetConfigFunc == nil {
		panic("SpeechServerMock.GetConfigFunc: method is nil but SpeechServer.GetConfig was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		GetConfigRequest *speechpb.GetConfigRequest
	}{
		ContextMoqParam:  contextMoqParam,
		GetConfigRequest: getConfigRequest,
	}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc(contextMoqParam, getConfigRequest)
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedSpeechServer.GetConfigCalls())
func (mock *SpeechServerMock) GetConfigCalls() []struct {
	ContextMoqParam  context.Context
	GetConfigRequest *speechpb.GetConfigRequest
} {
	var calls []struct {
		ContextMoqParam  context.Context
		GetConfigRequest *speechpb.GetConfigRequest
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetCustomClass calls GetCustomClassFunc.
func (mock *SpeechServerMock) GetCustomClass(contextMoqParam context.Context, getCustomClassRequest *speechpb.GetCustomClassRequest) (*speechpb.CustomClass, error) {
	if mock.GetCustomClassFunc == nil {
		panic("SpeechServerMock.GetCustomClassFunc: method is nil but SpeechServer.GetCustomClass was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetCustomClassRequest *speechpb.GetCustomClassRequest
	}{
		ContextMoqParam:       contextMoqParam,
		GetCustomClassRequest: getCustomClassRequest,
	}
	mock.lockGetCustomClass.Lock()
	mock.calls.GetCustomClass = append(mock.calls.GetCustomClass, callInfo)
	mock.lockGetCustomClass.Unlock()
	return mock.GetCustomClassFunc(contextMoqParam, getCustomClassRequest)
}

// GetCustomClassCalls gets all the calls that were made to GetCustomClass.
// Check the length with:
//
//	len(mockedSpeechServer.GetCustomClassCalls())
func (mock *SpeechServerMock) GetCustomClassCalls() []struct {
	ContextMoqParam       context.Context
	GetCustomClassRequest *speechpb.GetCustomClassRequest
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetCustomClassRequest *speechpb.GetCustomClassRequest
	}
	mock.lockGetCustomClass.RLock()
	calls = mock.calls.GetCustomClass
	mock.lockGetCustomClass.RUnlock()
	return calls
}

// GetPhraseSet calls GetPhraseSetFunc.
func (mock *SpeechServerMock) GetPhraseSet(contextMoqParam context.Context, getPhraseSetRequest *speechpb.GetPhraseSetRequest) (*speechpb.PhraseSet, error) {
	if mock.GetPhraseSetFunc == nil {
		panic("SpeechServerMock.GetPhraseSetFunc: method is nil but SpeechServer.GetPhraseSet was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		GetPhraseSetRequest *speechpb.GetPhraseSetRequest
	}{
		ContextMoqParam:     contextMoqParam,
		GetPhraseSetRequest: getPhraseSetRequest,
	}
	mock.lockGetPhraseSet.Lock()
	mock.calls.GetPhraseSet = append(mock.calls.GetPhraseSet, callInfo)
	mock.lockGetPhraseSet.Unlock()
	return mock.GetPhraseSetFunc(contextMoqParam, getPhraseSetRequest)
}

// GetPhraseSetCalls gets all the calls that were made to GetPhraseSet.
// Check the length with:
//
//	len(mockedSpeechServer.GetPhraseSetCalls())
func (mock *SpeechServerMock) GetPhraseSetCalls() []struct {
	ContextMoqParam     context.Context
	GetPhraseSetRequest *speechpb.GetPhraseSetRequest
} {
	var calls []struct {
		ContextMoqParam     context.Context
		GetPhraseSetRequest *speechpb.GetPhraseSetRequest
	}
	mock.lockGetPhraseSet.RLock()
	calls = mock.calls.GetPhraseSet
	mock.lockGetPhraseSet.RUnlock()
	return calls
}

// GetRecognizer calls GetRecognizerFunc.
func (mock *SpeechServerMock) GetRecognizer(contextMoqParam context.Context, getRecognizerRequest *speechpb.GetRecognizerRequest) (*speechpb.Recognizer, error) {
	if mock.GetRecognizerFunc == nil {
		panic("SpeechServerMock.GetRecognizerFunc: method is nil but SpeechServer.GetRecognizer was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetRecognizerRequest *speechpb.GetRecognizerRequest
	}{
		ContextMoqParam:      contextMoqParam,
		GetRecognizerRequest: getRecognizerRequest,
	}
	mock.lockGetRecognizer.Lock()
	mock.calls.GetRecognizer = append(mock.calls.GetRecognizer, callInfo)
	mock.lockGetRecognizer.Unlock()
	return mock.GetRecognizerFunc(contextMoqParam, getRecognizerRequest)
}

// GetRecognizerCalls gets all the calls that were made to GetRecognizer.
// Check the length with:
//
//	len(mockedSpeechServer.GetRecognizerCalls())
func (mock *SpeechServerMock) GetRecognizerCalls() []struct {
	ContextMoqParam      context.Context
	GetRecognizerRequest *speechpb.GetRecognizerRequest
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetRecognizerRequest *speechpb.GetRecognizerRequest
	}
	mock.lockGetRecognizer.RLock()
	calls = mock.calls.GetRecognizer
	mock.lockGetRecognizer.RUnlock()
	return calls
}

// ListCustomClasses calls ListCustomClassesFunc.
func (mock *SpeechServerMock) ListCustomClasses(contextMoqParam context.Context, listCustomClassesRequest *speechpb.ListCustomClassesRequest) (*speechpb.ListCustomClassesResponse, error) {
	if mock.ListCustomClassesFunc == nil {
		panic("SpeechServerMock.ListCustomClassesFunc: method is nil but SpeechServer.ListCustomClasses was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		ListCustomClassesRequest *speechpb.ListCustomClassesRequest
	}{
		ContextMoqParam:          contextMoqParam,
		ListCustomClassesRequest: listCustomClassesRequest,
	}
	mock.lockListCustomClasses.Lock()
	mock.calls.ListCustomClasses = append(mock.calls.ListCustomClasses, callInfo)
	mock.lockListCustomClasses.Unlock()
	return mock.ListCustomClassesFunc(contextMoqParam, listCustomClassesRequest)
}

// ListCustomClassesCalls gets all the calls that were made to ListCustomClasses.
// Check the length with:
//
//	len(mockedSpeechServer.ListCustomClassesCalls())
func (mock *SpeechServerMock) ListCustomClassesCalls() []struct {
	ContextMoqParam          context.Context
	ListCustomClassesRequest *speechpb.ListCustomClassesRequest
} {
	var calls []struct {
		ContextMoqParam          context.Context
		ListCustomClassesRequest *speechpb.ListCustomClassesRequest
	}
	mock.lockListCustomClasses.RLock()
	calls = mock.calls.ListCustomClasses
	mock.lockListCustomClasses.RUnlock()
	return calls
}

// ListPhraseSets calls ListPhraseSetsFunc.
func (mock *SpeechServerMock) ListPhraseSets(contextMoqParam context.Context, listPhraseSetsRequest *speechpb.ListPhraseSetsRequest) (*speechpb.ListPhraseSetsResponse, error) {
	if mock.ListPhraseSetsFunc == nil {
		panic("SpeechServerMock.ListPhraseSetsFunc: method is nil but SpeechServer.ListPhraseSets was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ListPhraseSetsRequest *speechpb.ListPhraseSetsRequest
	}{
		ContextMoqParam:       contextMoqParam,
		ListPhraseSetsRequest: listPhraseSetsRequest,
	}
	mock.lockListPhraseSets.Lock()
	mock.calls.ListPhraseSets = append(mock.calls.ListPhraseSets, callInfo)
	mock.lockListPhraseSets.Unlock()
	return mock.ListPhraseSetsFunc(contextMoqParam, listPhraseSetsRequest)
}

// ListPhraseSetsCalls gets all the calls that were made to ListPhraseSets.
// Check the length with:
//
//	len(mockedSpeechServer.ListPhraseSetsCalls())
func (mock *SpeechServerMock) ListPhraseSetsCalls() []struct {
	ContextMoqParam       context.Context
	ListPhraseSetsRequest *speechpb.ListPhraseSetsRequest
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ListPhraseSetsRequest *speechpb.ListPhraseSetsRequest
	}
	mock.lockListPhraseSets.RLock()
	calls = mock.calls.ListPhraseSets
	mock.lockListPhraseSets.RUnlock()
	return calls
}

// ListRecognizers calls ListRecognizersFunc.
func (mock *SpeechServerMock) ListRecognizers(contextMoqParam context.Context, listRecognizersRequest *speechpb.ListRecognizersRequest) (*speechpb.ListRecognizersResponse, error) {
	if mock.ListRecognizersFunc == nil {
		panic("SpeechServerMock.ListRecognizersFunc: method is nil but SpeechServer.ListRecognizers was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ListRecognizersRequest *speechpb.ListRecognizersRequest
	}{
		ContextMoqParam:        contextMoqParam,
		ListRecognizersRequest: listRecognizersRequest,
	}
	mock.lockListRecognizers.Lock()
	mock.calls.ListRecognizers = append(mock.calls.ListRecognizers, callInfo)
	mock.lockListRecognizers.Unlock()
	return mock.ListRecognizersFunc(contextMoqParam, listRecognizersRequest)
}

// ListRecognizersCalls gets all the calls that were made to ListRecognizers.
// Check the length with:
//
//	len(mockedSpeechServer.ListRecognizersCalls())
func (mock *SpeechServerMock) ListRecognizersCalls() []struct {
	ContextMoqParam        context.Context
	ListRecognizersRequest *speechpb.ListRecognizersRequest
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ListRecognizersRequest *speechpb.ListRecognizersRequest
	}
	mock.lockListRecognizers.RLock()
	calls = mock.calls.ListRecognizers
	mock.lockListRecognizers.RUnlock()
	return calls
}

// Recognize calls RecognizeFunc.
func (mock *SpeechServerMock) Recognize(contextMoqParam context.Context, recognizeRequest *speechpb.RecognizeRequest) (*speechpb.RecognizeResponse, error) {
	if mock.RecognizeFunc == nil {
		panic("SpeechServerMock.RecognizeFunc: method is nil but SpeechServer.Recognize was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		RecognizeRequest *speechpb.RecognizeRequest
	}{
		ContextMoqParam:  contextMoqParam,
		RecognizeRequest: recognizeRequest,
	}
	mock.lockRecognize.Lock()
	mock.calls.Recognize = append(mock.calls.Recognize, callInfo)
	mock.lockRecognize.Unlock()
	return mock.RecognizeFunc(contextMoqParam, recognizeRequest)
}

// RecognizeCalls gets all the calls that were made to Recognize.
// Check the length with:
//
//	len(mockedSpeechServer.RecognizeCalls())
func (mock *SpeechServerMock) RecognizeCalls() []struct {
	ContextMoqParam  context.Context
	RecognizeRequest *speechpb.RecognizeRequest
} {
	var calls []struct {
		ContextMoqParam  context.Context
		RecognizeRequest *speechpb.RecognizeRequest
	}
	mock.lockRecognize.RLock()
	calls = mock.calls.Recognize
	mock.lockRecognize.RUnlock()
	return calls
}

// StreamingRecognize calls StreamingRecognizeFunc.
func (mock *SpeechServerMock) StreamingRecognize(speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer) error {
	if mock.StreamingRecognizeFunc == nil {
		panic("SpeechServerMock.StreamingRecognizeFunc: method is nil but SpeechServer.StreamingRecognize was just called")
	}
	callInfo := struct {
		Speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer
	}{
		Speech_StreamingRecognizeServer: speech_StreamingRecognizeServer,
	}
	mock.lockStreamingRecognize.Lock()
	mock.calls.StreamingRecognize = append(mock.calls.StreamingRecognize, callInfo)
	mock.lockStreamingRecognize.Unlock()
	return mock.StreamingRecognizeFunc(speech_StreamingRecognizeServer)
}

// StreamingRecognizeCalls gets all the calls that were made to StreamingRecognize.
// Check the length with:
//
//	len(mockedSpeechServer.StreamingRecognizeCalls())
func (mock *SpeechServerMock) StreamingRecognizeCalls() []struct {
	Speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer
} {
	var calls []struct {
		Speech_StreamingRecognizeServer speechpb.Speech_StreamingRecognizeServer
	}
	mock.lockStreamingRecognize.RLock()
	calls = mock.calls.StreamingRecognize
	mock.lockStreamingRecognize.RUnlock()
	return calls
}

// UndeleteCustomClass calls UndeleteCustomClassFunc.
func (mock *SpeechServerMock) UndeleteCustomClass(contextMoqParam context.Context, undeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest) (*longrunningpb.Operation, error) {
	if mock.UndeleteCustomClassFunc == nil {
		panic("SpeechServerMock.UndeleteCustomClassFunc: method is nil but SpeechServer.UndeleteCustomClass was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		UndeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest
	}{
		ContextMoqParam:            contextMoqParam,
		UndeleteCustomClassRequest: undeleteCustomClassRequest,
	}
	mock.lockUndeleteCustomClass.Lock()
	mock.calls.UndeleteCustomClass = append(mock.calls.UndeleteCustomClass, callInfo)
	mock.lockUndeleteCustomClass.Unlock()
	return mock.UndeleteCustomClassFunc(contextMoqParam, undeleteCustomClassRequest)
}

// UndeleteCustomClassCalls gets all the calls that were made to UndeleteCustomClass.
// Check the length with:
//
//	len(mockedSpeechServer.UndeleteCustomClassCalls())
func (mock *SpeechServerMock) UndeleteCustomClassCalls() []struct {
	ContextMoqParam            context.Context
	UndeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest
} {
	var calls []struct {
		ContextMoqParam            context.Context
		UndeleteCustomClassRequest *speechpb.UndeleteCustomClassRequest
	}
	mock.lockUndeleteCustomClass.RLock()
	calls = mock.calls.UndeleteCustomClass
	mock.lockUndeleteCustomClass.RUnlock()
	return calls
}

// UndeletePhraseSet calls UndeletePhraseSetFunc.
func (mock *SpeechServerMock) UndeletePhraseSet(contextMoqParam context.Context, undeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest) (*longrunningpb.Operation, error) {
	if mock.UndeletePhraseSetFunc == nil {
		panic("SpeechServerMock.UndeletePhraseSetFunc: method is nil but SpeechServer.UndeletePhraseSet was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		UndeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest
	}{
		ContextMoqParam:          contextMoqParam,
		UndeletePhraseSetRequest: undeletePhraseSetRequest,
	}
	mock.lockUndeletePhraseSet.Lock()
	mock.calls.UndeletePhraseSet = append(mock.calls.UndeletePhraseSet, callInfo)
	mock.lockUndeletePhraseSet.Unlock()
	return mock.UndeletePhraseSetFunc(contextMoqParam, undeletePhraseSetRequest)
}

// UndeletePhraseSetCalls gets all the calls that were made to UndeletePhraseSet.
// Check the length with:
//
//	len(mockedSpeechServer.UndeletePhraseSetCalls())
func (mock *SpeechServerMock) UndeletePhraseSetCalls() []struct {
	ContextMoqParam          context.Context
	UndeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest
} {
	var calls []struct {
		ContextMoqParam          context.Context
		UndeletePhraseSetRequest *speechpb.UndeletePhraseSetRequest
	}
	mock.lockUndeletePhraseSet.RLock()
	calls = mock.calls.UndeletePhraseSet
	mock.lockUndeletePhraseSet.RUnlock()
	return calls
}

// UndeleteRecognizer calls UndeleteRecognizerFunc.
func (mock *SpeechServerMock) UndeleteRecognizer(contextMoqParam context.Context, undeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest) (*longrunningpb.Operation, error) {
	if mock.UndeleteRecognizerFunc == nil {
		panic("SpeechServerMock.UndeleteRecognizerFunc: method is nil but SpeechServer.UndeleteRecognizer was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		UndeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest
	}{
		ContextMoqParam:           contextMoqParam,
		UndeleteRecognizerRequest: undeleteRecognizerRequest,
	}
	mock.lockUndeleteRecognizer.Lock()
	mock.calls.UndeleteRecognizer = append(mock.calls.UndeleteRecognizer, callInfo)
	mock.lockUndeleteRecognizer.Unlock()
	return mock.UndeleteRecognizerFunc(contextMoqParam, undeleteRecognizerRequest)
}

// UndeleteRecognizerCalls gets all the calls that were made to UndeleteRecognizer.
// Check the length with:
//
//	len(mockedSpeechServer.UndeleteRecognizerCalls())
func (mock *SpeechServerMock) UndeleteRecognizerCalls() []struct {
	ContextMoqParam           context.Context
	UndeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest
} {
	var calls []struct {
		ContextMoqParam           context.Context
		UndeleteRecognizerRequest *speechpb.UndeleteRecognizerRequest
	}
	mock.lockUndeleteRecognizer.RLock()
	calls = mock.calls.UndeleteRecognizer
	mock.lockUndeleteRecognizer.RUnlock()
	return calls
}

// UpdateConfig calls UpdateConfigFunc.
func (mock *SpeechServerMock) UpdateConfig(contextMoqParam context.Context, updateConfigRequest *speechpb.UpdateConfigRequest) (*speechpb.Config, error) {
	if mock.UpdateConfigFunc == nil {
		panic("SpeechServerMock.UpdateConfigFunc: method is nil but SpeechServer.UpdateConfig was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		UpdateConfigRequest *speechpb.UpdateConfigRequest
	}{
		ContextMoqParam:     contextMoqParam,
		UpdateConfigRequest: updateConfigRequest,
	}
	mock.lockUpdateConfig.Lock()
	mock.calls.UpdateConfig = append(mock.calls.UpdateConfig, callInfo)
	mock.lockUpdateConfig.Unlock()
	return mock.UpdateConfigFunc(contextMoqParam, updateConfigRequest)
}

// UpdateConfigCalls gets all the calls that were made to UpdateConfig.
// Check the length with:
//
//	len(mockedSpeechServer.UpdateConfigCalls())
func (mock *SpeechServerMock) UpdateConfigCalls() []struct {
	ContextMoqParam     context.Context
	UpdateConfigRequest *speechpb.UpdateConfigRequest
} {
	var calls []struct {
		ContextMoqParam     context.Context
		UpdateConfigRequest *speechpb.UpdateConfigRequest
	}
	mock.lockUpdateConfig.RLock()
	calls = mock.calls.UpdateConfig
	mock.lockUpdateConfig.RUnlock()
	return calls
}

// UpdateCustomClass calls UpdateCustomClassFunc.
func (mock *SpeechServerMock) UpdateCustomClass(contextMoqParam context.Context, updateCustomClassRequest *speechpb.UpdateCustomClassRequest) (*longrunningpb.Operation, error) {
	if mock.UpdateCustomClassFunc == nil {
		panic("SpeechServerMock.UpdateCustomClassFunc: method is nil but SpeechServer.UpdateCustomClass was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		UpdateCustomClassRequest *speechpb.UpdateCustomClassRequest
	}{
		ContextMoqParam:          contextMoqParam,
		UpdateCustomClassRequest: updateCustomClassRequest,
	}
	mock.lockUpdateCustomClass.Lock()
	mock.calls.UpdateCustomClass = append(mock.calls.UpdateCustomClass, callInfo)
	mock.lockUpdateCustomClass.Unlock()
	return mock.UpdateCustomClassFunc(contextMoqParam, updateCustomClassRequest)
}

// UpdateCustomClassCalls gets all the calls that were made to UpdateCustomClass.
// Check the length with:
//
//	len(mockedSpeechServer.UpdateCustomClassCalls())
func (mock *SpeechServerMock) UpdateCustomClassCalls() []struct {
	ContextMoqParam          context.Context
	UpdateCustomClassRequest *speechpb.UpdateCustomClassRequest
} {
	var calls []struct {
		ContextMoqParam          context.Context
		UpdateCustomClassRequest *speechpb.UpdateCustomClassRequest
	}
	mock.lockUpdateCustomClass.RLock()
	calls = mock.calls.UpdateCustomClass
	mock.lockUpdateCustomClass.RUnlock()
	return calls
}

// UpdatePhraseSet calls UpdatePhraseSetFunc.
func (mock *SpeechServerMock) UpdatePhraseSet(contextMoqParam context.Context, updatePhraseSetRequest *speechpb.UpdatePhraseSetRequest) (*longrunningpb.Operation, error) {
	if mock.UpdatePhraseSetFunc == nil {
		panic("SpeechServerMock.UpdatePhraseSetFunc: method is nil but SpeechServer.UpdatePhraseSet was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		UpdatePhraseSetRequest *speechpb.UpdatePhraseSetRequest
	}{
		ContextMoqParam:        contextMoqParam,
		UpdatePhraseSetRequest: updatePhraseSetRequest,
	}
	mock.lockUpdatePhraseSet.Lock()
	mock.calls.UpdatePhraseSet = append(mock.calls.UpdatePhraseSet, callInfo)
	mock.lockUpdatePhraseSet.Unlock()
	return mock.UpdatePhraseSetFunc(contextMoqParam, updatePhraseSetRequest)
}

// UpdatePhraseSetCalls gets all the calls that were made to UpdatePhraseSet.
// Check the length with:
//
//	len(mockedSpeechServer.UpdatePhraseSetCalls())
func (mock *SpeechServerMock) UpdatePhraseSetCalls() []struct {
	ContextMoqParam        context.Context
	UpdatePhraseSetRequest *speechpb.UpdatePhraseSetRequest
} {
	var calls []struct {
		ContextMoqParam        context.Context
		UpdatePhraseSetRequest *speechpb.UpdatePhraseSetRequest
	}
	mock.lockUpdatePhraseSet.RLock()
	calls = mock.calls.UpdatePhraseSet
	mock.lockUpdatePhraseSet.RUnlock()
	return calls
}

// UpdateRecognizer calls UpdateRecognizerFunc.
func (mock *SpeechServerMock) UpdateRecognizer(contextMoqParam context.Context, updateRecognizerRequest *speechpb.UpdateRecognizerRequest) (*longrunningpb.Operation, error) {
	if mock.UpdateRecognizerFunc == nil {
		panic("SpeechServerMock.UpdateRecognizerFunc: method is nil but SpeechServer.UpdateRecognizer was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		UpdateRecognizerRequest *speechpb.UpdateRecognizerRequest
	}{
		ContextMoqParam:         contextMoqParam,
		UpdateRecognizerRequest: updateRecognizerRequest,
	}
	mock.lockUpdateRecognizer.Lock()
	mock.calls.UpdateRecognizer = append(mock.calls.UpdateRecognizer, callInfo)
	mock.lockUpdateRecognizer.Unlock()
	return mock.UpdateRecognizerFunc(contextMoqParam, updateRecognizerRequest)
}

// UpdateRecognizerCalls gets all the calls that were made to UpdateRecognizer.
// Check the length with:
//
//	len(mockedSpeechServer.UpdateRecognizerCalls())
func (mock *SpeechServerMock) UpdateRecognizerCalls() []struct {
	ContextMoqParam         context.Context
	UpdateRecognizerRequest *speechpb.UpdateRecognizerRequest
} {
	var calls []struct {
		ContextMoqParam         context.Context
		UpdateRecognizerRequest *speechpb.UpdateRecognizerRequest
	}
	mock.lockUpdateRecognizer.RLock()
	calls = mock.calls.UpdateRecognizer
	mock.lockUpdateRecognizer.RUnlock()
	return calls
}
